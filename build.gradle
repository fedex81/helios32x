plugins {
    id 'java'
}

compileJava {
    options.release = 11
    //options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

def dateString = getDate()
group 'com.fbdev.helios'

//version dateString
version dateString + '-SNAPSHOT'
def jarNameHead = rootProject.name + "-" + version

repositories {
    mavenCentral()
}

dependencies {
    //START helios
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    implementation group: 'org.jctools', name: 'jctools-core', version: '3.3.0'
    implementation group: 'org.jaudiolibs', name: 'audioservers-javasound', version: '2.0.0'
    implementation group: 'org.digitalmediaserver', name: 'cuelib-core', version: '2.0.0'
    implementation group: 'com.github.trilarion', name: 'java-vorbis-support', version: '1.2.1'
    implementation group: 'net.java.jinput', name: 'jinput', version: '2.0.9'

    //include local jars
    implementation fileTree(dir: 'lib', include: ['*.jar'])
    //END helios

    implementation group: 'org.ow2.asm', name: 'asm', version: '9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

def static getDate() {
    String date = new Date().format('yyMMdd')
    date.substring(0,2) + "." + date.substring(2)
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    dependsOn "compileJava"
    manifest {
        attributes 'Implementation-Title': 'Helios',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'omegadrive.SystemLoader'
    }
    duplicatesStrategy= "exclude"
    getArchiveBaseName().set(project.name + "-all")//+ version
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from {
        ["CREDITS.md", "README.md", "HISTORY.md", "LICENSE.md", "helios.properties"]
    }
    from("bios"){
        include "*.rom"
    }
    with jar
    doLast {
        println("Creating fatJar: "+ getArchiveFileName().getOrNull() +" in folder: " + destinationDirectory.getOrNull())
    }
}

task copyRes {
    copy {
        from {
            ["CREDITS.md", "README.md", "HISTORY.md",
             "LICENSE.md", "helios.properties"]
        }
        into "$buildDir/packageDir"
    }
    copy {
        from (".") {
            include "lib/**"
        }
        into "$buildDir/packageDir"
    }
    copy {
        from configurations.runtimeClasspath
        into "$buildDir/packageDir/lib"
    }
    copy {
        from ("res")
        include "*.properties"
        into "$buildDir/packageDir"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Helios',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'omegadrive.SystemLoader',
                'Class-Path': configurations.compileClasspath.collect { "lib/" + it.getName() }.join(' ')
    }
    archivesBaseName = rootProject.name
    destinationDirectory = file("$buildDir/packageDir")
    doLast {
        println("Creating jar: " + jar.getArchiveName() + " in folder: " + jar.getDestinationDir())
    }
}


task packageDistribution(type: Zip) {
    dependsOn "test", "jar", "copyRes", "writeToFile"
    archiveFileName = jarNameHead + ".zip"
    destinationDirectory = file("$buildDir/dist")

    from "$buildDir/packageDir"
    doLast {
        println("Creating package: " + packageDistribution.getArchiveName() +
                ", folder: " + packageDistribution.getDestinationDir())
    }
}

task writeToFile {
    String jarName = jarNameHead + ".jar"
    List<String> javaAdvOpts =
            ["-XX:AutoBoxCacheMax=65536", "-XX:-DontCompileHugeMethods", "-XX:+AlwaysCompileLoopMethods"]
    //win: default to busy wait
    List<String> winOpts = ["-Dhelios.busy.wait=true"]
    List<String> sampleBase = [ "java",
                                "-Dlog4j.configurationFile=./log4j2.properties",
                                "-Djinput.enable=true -Djinput.native.location=lib",
                                "-jar", "$jarName"] as String[]
    sampleBase.addAll(1, javaAdvOpts)
    List<String> sampleUx = new ArrayList<>(sampleBase)
    sampleUx.add("\"\$@\"" + "\n")
    List<String> sampleWin = new ArrayList<>(sampleBase)
    sampleWin.addAll(1, winOpts)
    sampleWin.add("\"%1\"" + "\n")
    // create the folders if it does not exist.(otherwise it will throw exception)
    File extraFolder = new File( "${buildDir}/packageDir")
    if( !extraFolder.exists() ) {
        extraFolder.mkdirs()
    }
    // create the file and write text to it.
    new File("${buildDir}/packageDir/launcher.sh").text = sampleUx.join (" ")
    new File("${buildDir}/packageDir/launcher.bat").text = sampleWin.join (" ")
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}